<객체와 테이블 매핑>

- JPA 에서 객체에 대한 접근은 field 접근방법, property(setter, getter 메소드) 접근 방법으로 구분.
- @Id의 위치에 따라 필드 or 프로퍼티 접근으로 구분.
    => getId(){ return id; } 에 @Id가 붙으면 프로퍼티 방식.
    => Long Id; 에 붙는다면 필드 방식 => 대부분 이걸로.
- @Access(AccessType.field) 같은걸로 사용할때도 있음.


1. 기본키 매핑 @Id [Customer2.entity]
    - float, Float, double, TimeStamp 등의 타입은 지양.
    1) @Id
    2) @IdClass     - 복합키와 관련
    3) @EmbeddedId  - 복합키와 관련

2. 기본키를 직접 할당하는 경우
    - @Id 를 사용

3. 기본키를 자동생성하기 위해서 = DB의 기능을 이용해서 생성.
    - @GeneratedValue
    - 여러 옵션 가능
        1) identity : 기본키 생성 처리를 DB에 위임
        2) sequence : 시퀀스를 이용한 키 생성
        3) table    : 별도의 기본키 테이블을 이용해서 생성
        4) auto     : 디비에 따라 기본키 생성 전략. default 설정

4. 시퀀스 생성 전략. [Customer3.entity]
    - @SequenceGenerator()
    - Db의 시퀀스 오브젝트를 이용 => 미리 작성된 시퀀스가 필요함.
    - 스키마 자동생성 옵션이 있을 때


5. 테이블 기본키 생성 전략 [Customer4.entity]
    - 기본키 생성을 위해 별도의 테이블을 생성하고, 이 테이블을 이용해 기본키 생성
    - @TableGenerator 필요
    - 테이블 생성과 키값 증가를 위한 update 가 실행되므로 성능 고려 필요

* seq, table 방식등은 그냥 그런게 있다 정도로 이해합시다.

