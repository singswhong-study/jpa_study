<JPQL : Java Persistence Query Language>
    - SQL 쿼리와 유사함
    - 테이블 대신 엔티티 이름과 속성을 사용

    1) 변수에 값 사용
        Query query = em.createQuery(
            "select r from Review r where r.sight.id = :sightId order by r.id desc"
        );
        query.setParameter("sightId", 1L);
        List<Review> results = query.getResultList();


    2) 변수에 객체 사용
        Sight s = em.find(Sight.class, 1L);
        Query query = em.createQuery(
            "select r from Review r where r.sight = :sight order by r.id desc"
        );
        query.setParameter("sight", s);
        List<Review> results = query.getResultList();

    3) select 별칭 from 엔티티 별칭... 이런식.
    4) 컨디션. 검색조건은 SQL과 거의 같다.
    5) 파라미터는 이름을 사용할때는 query.setParameter("이름", "값")
        인덱스를 사용할때는 query.setParameter(0, "값")
    6) 정렬순서는 역시 order by
    7) 페이징 처리. limit ?, ? 같은것.
        query.setFirstResult(8) : 결과를 읽어올 시작 행. 0부터 시작.
        query.setMaxResult(8) : 최대 결과 개수
            => 이 경우 9번째 결과부터 4개를 조회

    9) 일반쿼리 사용 고려할 부분
        - 여러 테이블 조인
        - DBMS에 특화된 경우(오라클 힌트같은거)
        - 서브쿼리가 필요할때
        - 통계, 대용량 조회/처리 등