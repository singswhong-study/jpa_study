<CQRS : Command Query Responsibility Segregation>

1. Command (명령)
    - 시스템 데이터 변경
    - 기능 : 주문취소, 배송완료 등

2. Query
    - 시스템 데이터 조회
    - 기능 : 주문 목록

3. Responsibility Segregation(책임 분리)
    1) 책임
        - 구성요소의 역할
        - 모델, 클래스, 함수, 모듈, 패키지, 웹서버, DB

    2) 분리
        - 역할에 따라 구성 나누기

4. CQRS란? 시스템 데이터 변경 역할을 하는 요소와 시스템 데이터 조회 역할을 하는 요소를 나누는것.
    - 코드만 나뉘는건 아님
    - 구현방식도 나누고 인스턴스도 나누고. 뭐 그렇다.



5. 어느분의 코멘트
"
    CUD(Create Update Delete. Command)는 normalized된 데이터를 가지고 ORM 등을 가지고 아름답게 처리 가능한데,
    R(Retrieve. Query)는 점차 요구사항이 증가하면서 denormalized되는 경향이 있음.
    이걸 한 모델(시스템)로 처리하려고 하면 normalized된 데이터를 사용하는 복잡한 Biz Logic이
    denormalized된 조회 로직 때문에 더렵혀지고, 복잡해 짐
    CUD는 깨끗한 객체지향 세계에서 보호하고
    R은 다양한 Needs에 맞게 그때 그때 만드는 것이 지속 가능한 SW 개발에 도움이 되는 것 같음.
    즉 시스템이 복잡해 지는 것은 복잡한 Biz Logic 때문이 아니라
    그때 그때 나오는 다양한 조회 로직 때문이라고 여겨짐
    그래서 둘을 분리하는 것이 필요함.
    CUD는 Domain Driven Design이니 OOP 등을 잘 준수하고
    R은 그냥 절차지향적으로 만드는 것이 맞다고 생각함.
"

6. 명령과 쿼리는 서로 다루는 데이터가 다르다
    - 명령은 주로 최소한의 연관된 테이블만 손대지만 쿼리(조회)는 뎁스가 깊어질수가 있다.
    - 또한 쿼리(조회) 와 명령은 코드변경빈도, 사용자가 다르다.
    => 단일 책임 원칙의 코드를 따르지 못한다.

7. 상품조회나 상세, 댓글 등록, 백오피스의 판매수치 는 각각의 기능마다 성능요구치가 다르다.
    => 복잡한 데이터들이 얽혀있는 DB는 별도로 나눌수가 없다.. 고로 분리가 되어야한다.
    => 데이터 정규화 같은. DDD.

